"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""

import random
from timeit import timeit
import statistics


def median_3(a):
    return statistics.median(a)


if __name__ == "__main__":
    mass_1 = [2 * m + 1 for m in range(10)]
    random.shuffle(mass_1)
    mass_2 = [2 * m + 1 for m in range(100)]
    random.shuffle(mass_2)
    mass_3 = [2 * m + 1 for m in range(1000)]
    random.shuffle(mass_3)

    print(timeit("median_3(mass_1[:])", globals=globals(), number=100))
    print(timeit("median_3(mass_2[:])", globals=globals(), number=100))
    print(timeit("median_3(mass_3[:])", globals=globals(), number=100))

# Вычисления проводились на 100 замерах
# 1) Гномья сортировка . Cложность: O(n^2)
# 0.0013521589999999986
# 0.148400021
# 13.174333965999999
# 2) Без сортировки . Cложность: O(n^2)
# 0.000512147999999997
# 0.032408466000000004
# 1.6537956809999999
# 3) Встроенная функция поиска. Cложность: (statistics.median основана на sorted, O(nlog(n))
# 0.0003208750000000121
# 0.0009821619999999948
# 0.024598597
# По времени оказался эффективней встроенная функция поиска медианы
