"""
Задание 1.

Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.

Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""


from random import randint
from timeit import timeit


def bubble_sort(lst_obj):
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj) - n):
            if lst_obj[i] > lst_obj[i + 1]:
                lst_obj[i], lst_obj[i + 1] = lst_obj[i + 1], lst_obj[i]
        n += 1
    return lst_obj


def bubble_sort_1(lst_obj):
    n = len(lst_obj)
    while n > 1:
        for i in range(len(lst_obj) - 1):
            if lst_obj[i] > lst_obj[i + 1]:
                lst_obj[i], lst_obj[i + 1] = lst_obj[i + 1], lst_obj[i]
            else:
                break
        n -= 1
    return lst_obj


orig_list = [randint(-100, 100) for _ in range(10)]
# orig_list = [i for i in range(1000)]


print(timeit("bubble_sort(orig_list)", globals=globals(), number=1000))
print(bubble_sort(orig_list))
print(timeit("bubble_sort_1(orig_list)", globals=globals(), number=1000))
print(bubble_sort_1(orig_list))

# Отлчиче по скорости доработанного от недоработанного варианта в два раза при случайном списке
# В случае, если список уже отсоритирован то чем больше список, тем больше разница
#
# Результаты с отсортированным списком из 1000 значений списком
# не доработанная функция:
# 50.698931300000005
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 ... 1000]
# доработанная функция
# 0.5194550000000007
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 ... 1000]
#
#
# Результаты со случайным списком из 10 значений
# не доработанная функция:
# 0.008893100000000001
# [-86, -85, -78, -34, -20, -14, -4, 54, 89, 98]
# доработанная функция
# 0.004846999999999997
# [-86, -85, -78, -34, -20, -14, -4, 54, 89, 98]


